function [quality,exceptions] = rd_MolProbity_results(ensemble,filename)
% rd_MolProbity_results(ensemble,filename)
%
% Reads MolProbity output as generated by the command line function
% oneline-analysis
% assumes that all files specified in the ensemble description had been put
% into the directory that was supplied as an argument to oneline-analysis
% a population-weighted average of the quality measures is returned
%
% ensemble  file name of a MMMx ensemble description file (.ens)
% filename  file name of the MolProbity output (redirect Linux stdout to a
%           file when using MolProbity)
%
% quality   structure with fields corresponding to individual quality
%           measures
%           .pdb_files      list of all PDB files in the ensemble
%           .pop            vector of populations
%           .clash_score    MolProbity clash score
%
% exceptions    errors or warnings, if any
%
% G. Jeschke, 22.12.2022

[all_files,pop,exceptions] = rd_ensemble_definition(ensemble);
pop = pop/sum(pop);

if isempty(exceptions) || isempty(exceptions{1})
    quality.pdb_files = all_files;
    quality.pop = pop;
else
    return
end

% open the file, return exception if impossible
try
    fid = fopen(filename);
catch exception
    exceptions{1} = exception;
    return
end

if fid == -1
    quality.clash_score = [];
    exceptions = {MException('rd_MolProbity_results:file_could_not_be_opened',...
                                    'File %s could not be opened',filename)};
    return
end

clash_score = 0;
rota_outlier = 0;
rota_favored = 0;
rama_outlier = 0;
rama_allowed = 0;
rama_favored = 0;
twisted_peptides = 0;
bad_bonds = 0;
bad_angles = 0;
MolProbity_score = 0;
MolProbity_pct_rank = 0;
while 1
    tline = fgetl(fid);
    if ~ischar(tline) 
        break 
    end
        poi = strfind(tline,'#');
    if ~isempty(poi)
        if poi(1) == 1
            continue
        end
        tline = tline(1:poi-1);
    end
    args = split(tline,':');
    fname = args{1};
    k = 0;
    number = 0;
    while k < length(all_files)
        k = k + 1;
        if strcmpi(fname,all_files(k).name)
            number = k;
            break
        end
    end
    p = pop(number);
    num_peptides = str2double(args{30});
    num_bonds = str2double(args{32});
    num_angles = str2double(args{36});
    clash_score = clash_score+p*str2double(args{9});
    num_rota = str2double(args{20});
    rota_outlier = rota_outlier+p*str2double(args{18})/num_rota;
    rota_favored = rota_favored+p*str2double(args{19})/num_rota;
    num_rama = str2double(args{24});
    rama_outlier = rama_outlier+p*str2double(args{21})/num_rama;
    rama_allowed = rama_allowed+p*str2double(args{22})/num_rama;
    rama_favored = rama_favored+p*str2double(args{23})/num_rama;
    twisted_peptides = twisted_peptides+p*str2double(args{29})/num_peptides;
    bad_bonds = bad_bonds+p*str2double(args{31})/num_bonds;
    bad_angles = bad_angles+p*str2double(args{35})/num_angles;
    MolProbity_score = MolProbity_score+p*str2double(args{46});
    MolProbity_pct_rank = MolProbity_pct_rank+p*str2double(args{47});
end

fclose(fid);

quality.clash_score = clash_score;
quality.rota_outlier = rota_outlier;
quality.rota_favored = rota_favored;
quality.rama_outlier = rama_outlier;
quality.rama_allowed = rama_allowed;
quality.rama_favored = rama_favored;
quality.twisted_peptides = twisted_peptides;
quality.bad_bonds = bad_bonds;
quality.bad_angles = bad_angles;
quality.MolProbity_score = MolProbity_score;
quality.MolProbity_pct_rank = MolProbity_pct_rank;
